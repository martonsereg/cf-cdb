
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "",
  "Parameters": {

    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength" : "1",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },

    "AdminPassword" : {
      "Description" : "Admin password for Cloudbreak",
      "Type" : "String",
      "NoEcho": "true",
      "MinLength" : "6",
      "MaxLength" : "30",
      "ConstraintDescription" : "must be at least 6 characters long, and must contain a lowercase letter and a number",
      "AllowedPattern" : "^(?=.*\\d)(?=.*[a-z])(?!.*\\s).{6,30}$"
    },
    "StackVersion" : {
      "Description" : "HDP Stack Version",
      "Type" : "String",
      "Default" : "HDP 2.4 + Hadoop 2.7.2",
      "AllowedValues" : [ "HDP 2.4 + Hadoop 2.7.2" ]
    },
    "WorkloadType" : {
      "Description" : "Workload type for HDP cluster",
      "Type" : "String",
      "Default" : "multi-node-hdfs-yarn",
      "AllowedValues" : [ "multi-node-hdfs-yarn", "hdp-spark-cluster", "hdp-small-default", "hdp-streaming-cluster" ]
    },
    "ClusterSize" : {
      "Description" : "Number of worker nodes in HDP cluster",
      "Type" : "Number",
      "Default" : "3",
      "MinValue" : "1",
      "MaxValue" : "100",
      "ConstraintDescription" : "Must be between 1 and 100."
    },
    "InstanceType" : {
      "Description" : "Instance type of worker nodes",
      "Type" : "String",
      "Default" : "m4.large",
      "AllowedValues" : [ "m4.large", "m4.xlarge", "m4.2xlarge" ]
    }
  },

  "Metadata" : {
      "AWS::CloudFormation::Interface" : {
        "ParameterGroups" : [
          {
            "Label" : { "default" : "Security Configuration" },
            "Parameters" : [ "KeyName", "AdminPassword" ]
          },
          {
            "Label" : { "default" : "Cluster Configuration" },
            "Parameters" : [ "StackVersion", "WorkloadType", "ClusterSize", "InstanceType" ]
          }
        ],
        "ParameterLabels" : {
          "AdminPassword" : { "default" : "Admin Password" },
          "KeyName" : { "default" : "SSH Key Name"},
          "StackVersion" : { "default" : "Stack Version" },
          "WorkloadType" : { "default" : "Workload Type" },
          "ClusterSize" : { "default" : "Worker Nodes" },
          "InstanceType" : { "default" : "Instance Type" }
        }
      }
  },

  "Mappings": {
      "AWSRegionAMI": {
        "us-east-1": { "ami": "ami-5e20c033"},
        "us-west-2": { "ami": "ami-24fb0944"},
        "us-west-1": { "ami": "ami-7a08711a"},
        "eu-west-1": { "ami": "ami-247df557"},
        "eu-central-1": { "ami": "ami-d97f9db6"},
        "ap-southeast-1": { "ami": "ami-9338eff0"},
        "ap-northeast-1": { "ami": "ami-f1a74290"},
        "ap-southeast-2": { "ami": "ami-253a1646"},
        "sa-east-1": { "ami": "ami-4a5fd626"} 
      }
   },

   "Resources" : {

    "CloudbreakRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version" : "2012-10-17",
               "Statement": [ {
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [ "ec2.amazonaws.com" ]
                  },
                  "Action": [ "sts:AssumeRole" ]
               } ]
            },
            "Path": "/",
            "Policies": [ {
               "PolicyName": "root",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                     "Action": [ "sts:AssumeRole" ],
                     "Resource": "*"
                  } ]
               }
               } ]
            }
      },
      "RootInstanceProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
            "Path": "/",
            "Roles": [ {
               "Ref": "CloudbreakRole"
            } ]
         }
      },

      "CredentialRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version" : "2012-10-17",
               "Statement": [ {
                  "Effect": "Allow",
                  "Principal": {
                     "AWS": { "Fn::Join" : ["", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, ":root" ]] }
                  },
                  "Action": [ "sts:AssumeRole" ],
                  "Condition": {
                    "StringEquals": {
                      "sts:ExternalId": "provision-ambari"
                    }
                  }
               } ]
            },
            "Path": "/",
            "Policies": [ {
               "PolicyName": "root",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                     "Action": "*",
                     "Resource": "*"
                  } ]
               }
               } ]
            }
      },

    "LambdaBucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "AccessControl" : "PublicRead",
        "BucketName" : "cloudbreak-lambda"
      }
    },

    "Cloudbreak": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "CredentialRole",
      "Metadata" : {
      },
      "Properties": {
        "IamInstanceProfile": { "Ref" : "RootInstanceProfile" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionAMI", { "Ref" : "AWS::Region" }, "ami" ] },
        "InstanceType"   : "m4.large",
        "SecurityGroups" : [ {"Ref" : "CloudbreakSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "exec > >(tee /var/log/cbd-quick-start.log) 2>&1\n",
          "set -x\n",
          "#cat << COMMENT\n",
          "\n",
          "sed -i 's/^After=network.target docker.socket cloud-final.service waagent.service/After=network.target docker.socket/' /etc/systemd/system/docker.service\n",
          "sed -i '/^Wants/ d' /etc/systemd/system/docker.service\n",
          "systemctl daemon-reload\n",
          "systemctl stop docker\n",
          "systemctl start docker\n",
          "\n",
          "echo wait for docker ...\n",
          "while ! (curl -m 1 -f 127.0.0.1:2376/_ping &>/dev/null); do echo -n .; sleep 1; done\n",
          "\n",
          "export CREDENTIAL_ROLE_ARN=", { "Fn::GetAtt" : [ "CredentialRole" , "Arn" ] }, "\n",
          "export BLUEPRINT=", { "Ref" : "WorkloadType" }, "\n",
          "export CLUSTER_SIZE=", { "Ref" : "ClusterSize" }, "\n",
          "export INSTANCE_TYPE=", { "Ref" : "InstanceType" }, "\n",
          "export ADMIN_PASSWORD=", { "Ref" : "AdminPassword" }, "\n",
          "cd /var/lib/cloudbreak-deployment\n",
          "cbd init\n",
          "echo 'export UAA_DEFAULT_USER_PW=" , { "Ref" : "AdminPassword" }, "' >> Profile\n",
          "cbd update dockerless\n",
          "cbd pull-parallel\n",
          "cbd regenerate\n",
          "cbd start-wait\n",
          "cat > /tmp/cluster_create << EOF\n",
          "credential create --AWS --name aws-access --roleArn $CREDENTIAL_ROLE_ARN --sshKeyUrl http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key\n",
          "template create --AWS --name worker-node --instanceType $INSTANCE_TYPE --volumeCount 2 --volumeSize 500 --volumeType gp2\n",
          "credential select --name aws-access\n",
          "blueprint create --name multi-node-hdfs-yarn --description multi-node-hdfs-yarn --url https://gist.githubusercontent.com/martonsereg/8328c677f1711922a2d9a46d0f82f931/raw/3b96550bcacba607f436e81a11a32126f9ea8415/multi-node-hdfs-yarn.bp\n",
    		  "blueprint select --name $BLUEPRINT\n",
    		  "instancegroup configure --instanceGroup cbgateway --nodecount 1 --templateName worker-node\n",
    		  "instancegroup configure --instanceGroup master --nodecount 1 --templateName worker-node\n",
    		  "instancegroup configure --instanceGroup slave_1 --nodecount $CLUSTER_SIZE --templateName worker-node\n",
    		  "network select --name default-aws-network\n",
     		  "securitygroup select --name all-services-port\n",
    		  "stack create --AWS --name ", { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "-hdp"]] }, " --region ", { "Ref" : "AWS::Region" }, "\n",
    		  "cluster create --wait yes --userName admin --password $ADMIN_PASSWORD\n",
          "EOF\n",
          "cat /tmp/cluster_create | cbd util cloudbreak-shell-quiet\n",
          "cat > /tmp/stack_metadata << EOF\n",
          "stack metadata --name ", { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "-hdp"]] }, " --outputType JSON --instancegroup cbgateway\n",
          "EOF\n",
          "export AMBARI_IP=$(cat /tmp/stack_metadata | cbd util cloudbreak-shell-quiet | sed -r 's/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | tr -d '\\015' | grep '^{\"cbgateway\":\\[.*\\]}$' | jq .cbgateway[] -r)\n",
          "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
          "/usr/bin/cfn-signal -s true -e 0 --id ambariUrl --data \"http://$AMBARI_IP:8080\" '", { "Ref" : "ClusterWaitHandle" }, "'\n",
          "#COMMENT\n",
          ""
        ]]}}
      }
    },

    "ClusterWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "ClusterWaitCondition" : {
       "Type" : "AWS::CloudFormation::WaitCondition",
       "DependsOn" : "Cloudbreak",
       "Properties" : {
          "Handle"  : { "Ref" : "ClusterWaitHandle" },
          "Timeout" : 36000
       }
    },

    "LambdaFunctionUploaderFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
              "var http = require('http');",
              "var fs = require('fs');",
              "var aws = require('aws-sdk');",
              "var s3 = new aws.S3({ apiVersion: '2006-03-01' });",
              "exports.handler = function(event, context) {",
              "    var cfnResponse = require('cfn-response');",
              "    var responseData = {};",
              "    if (event.RequestType == 'Create') {",
              "        var file = fs.createWriteStream(\"/tmp/hdp-link.zip\");",
              "        var request = http.get(\"http://s3-us-west-2.amazonaws.com/hdp-lambda/hdp-link.zip\", function(response) {",
              "          response.pipe(file);",
              "          var body = fs.readFile('/tmp/hdp-link.zip', function(e, body){",
              "           var s3obj = new aws.S3({params: {Bucket: 'cloudbreak-lambda', Key: 'hdp-link.zip'}});",
              "           s3obj.upload({Body: body}).",
              "             on('httpUploadProgress', function(evt) { console.log(evt); }).",
              "             send(function(err, data) {",
              "               cfnResponse.send(event, context, cfnResponse.SUCCESS, responseData);",
              "               console.log(err, data)",
              "             });",
              "          });",
              "       })",
              "    } else if (event.RequestType == 'Delete') {",
              "        var params = {",
              "              Bucket: 'cloudbreak-lambda',",
              "              Key: 'hdp-link.zip'",
              "        };",
              "        s3.deleteObject(params, function(err, data) {",
              "            console.log(\"Deleted\")",
              "            cfnResponse.send(event, context, cfnResponse.SUCCESS, responseData);",
              "        });",
              "    }",
              "}"
          ]]}
        },        
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },

    "LambdaFunctionUploader": {
      "Type": "Custom::LambdaFunctionUploader",
      "DependsOn": "LambdaBucket",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["LambdaFunctionUploaderFunction", "Arn"] }
      }
    },

    "LinkHDPCluster": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": "LambdaFunctionUploader",
      "Properties": {
        "Handler": "stack-delete-wait.handler",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Code": {
          "S3Bucket" : "cloudbreak-lambda",
          "S3Key" : "hdp-link.zip"
        },        
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      }
    },

    "HDPCluster": {
      "Type": "Custom::HDPCluster",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["LinkHDPCluster", "Arn"] },
        "ClusterName":  { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "-hdp"]] }
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": "arn:aws:logs:*:*:*"
            },
            {
                "Effect": "Allow",
                "Action": ["cloudformation:DescribeStacks","cloudformation:DeleteStack","s3:*","ec2:*","autoscaling:*"],
                "Resource": "*"
            }]
          }
        }]
      }
    },

    "CloudbreakSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 and SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "3000", "ToPort" : "3001", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "8089", "ToPort" : "8089", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    }
   },

  "Outputs" : {
    "CloudbreakURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "Cloudbreak", "PublicDnsName" ]}, ":3000/"]] },
      "Description" : "Cloudbreak UI URL"
    },
    "SshAccess" : {
      "Value" : { "Fn::Join" : ["", ["ssh cloudbreak@", { "Fn::GetAtt" : [ "Cloudbreak", "PublicIp" ]} ]] },
      "Description" : "Access the instance via ssh"
    },
    "AmbariURL" : {
      "Value" : { "Fn::GetAtt" : [ "ClusterWaitCondition", "Data" ]},
      "Description" : "Ambari URL"
    }
  }
}
